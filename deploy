#!/bin/sh

# Deploys the files/directories contained in this repo to
# their correct locations in my $HOME directory on a Linux
# (Fedora) machine.

# COMMAND LINE
echo 'Copying bashrc and inputrc to $HOME dir'
cp bashrc "$HOME/.bashrc"
cp inputrc "$HOME/.inputrc"

# VIM
mkdir -p "$HOME/.vim/autoload" "$HOME/.vim/bundle"
echo 'Downloading pathogen for vim'
curl -Sso "$HOME/.vim/autoload/pathogen.vim" \
    https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim
( cd "$HOME/.vim/bundle"
    if [ ! -d "jedi-vim" ]; then
        echo 'Cloning jedi-vim'
        git clone git@github.com:davidhalter/jedi-vim.git
    fi
    cd jedi-vim
    git submodule update --init
)
( cd "$HOME/.vim/bundle"
    if [ ! -d "vim-colors-solarized" ]; then
        echo "Cloning vim-colors-solarized"
        git clone git://github.com/altercation/vim-colors-solarized.git
    fi
)
echo 'Copying vimrc to $HOME dir'
cp vimrc "$HOME/.vimrc"

# GIT
echo 'Copying git configs'
cp gitk "$HOME/.gitk"
cp gitconfig "$HOME/.gitconfig"

# TERMINATOR
echo 'Copying terminator config'
trap "rm -f config" EXIT
sed "s#<BACKGROUND_URI>#$PWD/clouds.png#" terminator_config > config
if [ -d "$HOME/.config/terminator" ]; then
    mv config "$HOME/.config/terminator/"
else
    mkdir -p "$HOME/.config/terminator" &&
    mv config "$HOME/.config/terminator/"
fi

# OTHER EXECUTABLES
[ ! -d "${HOME}/bin" ] && { echo "Creating ${HOME}/bin"; mkdir "${HOME}/bin"; }

# SPARK (command line graphs)
echo "Downloading 'spark'"
{ curl --silent \
  https://raw.github.com/holman/spark/master/spark > "${HOME}/bin/spark" &&
  chmod a+x "${HOME}/bin/spark"
} || { rm -f "${HOME}/bin/spark"; echo "Failed to download 'spark'"; }

# GET DROPBOX
echo "Installing Dropbox"
# Always install from fresh, in case of updates
[ -f "${HOME}/bin/dropbox.py" ] && { dropbox.py stop; }
rm -rf ~/.dropbox-dist
# Grab the CLI script, which can install Dropbox for me, but
# delete the lines which prompt for yes/no input, and disable GUI,
# and fixes "running" command to have Unix style exit codes
{ curl --silent \
  https://linux.dropbox.com/packages/dropbox.py > "${HOME}/bin/dropbox.tmp" &&
  ln="$(awk '/if not yes_no_question.*/ {print FNR}' "${HOME}/bin/dropbox.tmp")" &&
  sed "${ln},$((ln + 2)) d" "${HOME}/bin/dropbox.tmp" |
  sed "s/Returns 1 if running 0 if not running/Returns 0 if running 1 if not running/" |
  sed "s/return int(is_dropbox_running())/return int(not is_dropbox_running())/" \
    > "${HOME}/bin/dropbox.py" &&
  chmod a+x "${HOME}/bin/dropbox.py" &&
  rm -f "${HOME}/bin/dropbox.tmp"
} || { rm -rf "${HOME}/bin/dropbox.py"; echo "Failed to install dropbox.py"; }
[ -f "${HOME}/bin/dropbox.py" ] && {
  DISPLAY= dropbox.py start -i
  dropbox.py autostart yes
}
dropbox.py running || echo "Dropbox is not running"

echo 'Done'
